---
title: "HW2"
format: html
editor: visual
---

## Task 1: Basic Vector practice

### 1.

```{r}
pre <- c(130, 128, 116, 124, 133, 134, 118, 126, 114, 127, 141, 138, 128, 140, 137, 131, 120, 128, 139, 135)

post <- c(114, 98, 113, 99, 107, 116, 113, 111, 119, 117, 101, 119, 130, 122, 106, 106, 124, 102, 117, 113)

```

### 2.

```{r}
names <- paste("Subject", 1:20, sep = "_")
names(pre) <- names
names(post) <- names
```

### 3.

```{r}
change <- pre-post

```

### 4.

```{r}
mean(change)

```

### 5.

```{r}
decrease_indices <- which(change > 0)

decrease <- change[decrease_indices]

print(decrease)

```

### 6.

```{r}
increase_indices <- which(change < 0)

increase <- change[increase_indices]

increase
```

### 7.

```{r}
mean(decrease)
```

## Task 2: Basic Data Frame practice

### 1.

```{r}
my_df <- data.frame(patient = names, pre_bp = pre, post_bp = post,  diff_bp=change)

```

### 2.

```{r}
negative_bp_changes <- subset(my_df, diff_bp < 0)
```

### 3.

```{r}
my_df$postbp120 <- my_df$post_bp<120

```

### 4.

```{r}
knitr::kable(my_df)
```

## Task 3: List practice

### 1.

```{r}
pretreatment <- c(138, 135, 147, 117, 152, 134, 114, 121, 131, 130)

aftertreatment <- c(105, 136, 123, 130, 134, 143, 135, 139, 120, 124)

names1 <- paste("Subject", 1:10, sep = "_")
names(pretreatment) <- names1
names(aftertreatment) <- names1
change <- pretreatment-aftertreatment
my_df1 <- data.frame(patient = names1, pre_bp = pretreatment, post_bp = aftertreatment,  diff_bp=change)
my_df1$postbp120 <- my_df1$post_bp<120
```

### 2.

```{r}
 

my_list <- list(my_df1,my_df)
my_list <- list(treatment = my_df1,placebo=my_df)
my_list
```

### 3.

```{r}
my_list[1]
my_list[[1]]
my_list$treatment
```
### 4.
```{r}
my_list[[2]][2]
```

## Task 4: Control Flow Practice

### 1.
```{r}
my_df1$status <- character(10)
my_df1$status <- ifelse(my_df1$post_bp <= 120, "optimal",
                  ifelse(my_df1$post_bp > 120 & my_df1$post_bp < 130, "borderline", 
                  ifelse(my_df1$post_bp >= 130, "high", NA)))
```

### 2.
```{r}
my_list[[1]]$status <- character(10)

for (i in 1:nrow(my_list[[1]])) {
  if (my_list[[1]]$post_bp[i] <= 120) {
    my_list[[1]]$status[i] = "optimal"
  } else if (my_list[[1]]$post_bp[i] > 120 & my_list[[1]]$post_bp[i] < 130) {
   my_list[[1]]$status[i] = "borderline"
  } else if (my_list[[1]]$post_bp[i] >= 130) {
    my_list[[1]]$status[i] = "high"
  }
}
```


### 3.
```{r}
my_list[[2]]$status <- character(20)

for (i in 1:nrow(my_list[[2]])) {
  if (my_list[[2]]$post_bp[i] <= 120) {
    my_list[[2]]$status[i] = "optimal"
  } else if (my_list[[2]]$post_bp[i] > 120 & my_list[[2]]$post_bp[i] < 130) {
   my_list[[2]]$status[i] = "borderline"
  } else if (my_list[[2]]$post_bp[i] >= 130) {
    my_list[[2]]$status[i] = "high"
  }
}
```

## Task 5: Function Writing

### 1.
```{r}
compute_summary <- function(my_list, stat = "mean") {
  
  # Function to extract summary function
  my_fun <- get(stat)
  
  # Extracting data frames from the list
  treatment <- my_list[[1]]
  placebo <- my_list[[2]]
  
  # Extracting statistics for treatment data frame
  treatment_summary <- sapply(treatment[c("pre_bp", "post_bp", "diff_bp")], my_fun)
  
  # Extracting statistics for placebo data frame
  placebo_summary <- sapply(placebo[c("pre_bp", "post_bp", "diff_bp")], my_fun)
  
  # Naming the results
  names_vec <- c(paste0("treatment_pre_bp_", stat), paste0("treatment_pre_bp_", stat),paste0("treatment_diff_bp_", stat),paste0("placebo_pre_bp_", stat), paste0("placebo_post_bp_", stat),paste0("placebo_diff_bp_", stat))
  
  # Creating a named vector of results
  result <- c(treatment_summary, placebo_summary)
  names(result) <- names_vec
  
  # Returning the result as a named vector
  return(result)
}

result <-compute_summary(my_list )
result
result <-compute_summary(my_list, stat = "sd")
result
result <-compute_summary(my_list, stat = "var")
result
result <-compute_summary(my_list, stat = "min")
result
result <-compute_summary(my_list, stat = "max")
result
```


